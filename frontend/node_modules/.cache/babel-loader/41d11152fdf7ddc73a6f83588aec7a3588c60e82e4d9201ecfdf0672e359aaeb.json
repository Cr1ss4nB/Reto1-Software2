{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import apiService from'../services/apiService';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth debe ser usado dentro de un AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(()=>{// Inicializar estado basado en localStorage\nconst token=localStorage.getItem('token');const customerId=localStorage.getItem('customerId');console.log('AuthContext initial state - token:',!!token,'customerId:',customerId);return!!token;});const[user,setUser]=useState(()=>{const customerId=localStorage.getItem('customerId');return customerId?{customerId}:null;});const[loading,setLoading]=useState(false);useEffect(()=>{// Solo verificar una vez al montar\nconst token=localStorage.getItem('token');const customerId=localStorage.getItem('customerId');console.log('AuthContext useEffect - Checking stored auth:',{token:!!token,customerId});if(token&&customerId){apiService.setAuthToken(token);setIsAuthenticated(true);setUser({customerId});console.log('AuthContext useEffect - User authenticated from storage');}setLoading(false);},[]);const login=async(customerId,password)=>{try{console.log('LOGIN START - customerId:',customerId);const response=await apiService.login(customerId,password);console.log('LOGIN RESPONSE:',response.data);if(response.data&&response.data.token){const token=response.data.token;console.log('LOGIN SUCCESS - Token received:',token.substring(0,20)+'...');// Guardar en localStorage\nlocalStorage.setItem('token',token);localStorage.setItem('customerId',customerId);console.log('LOGIN - Token saved to localStorage:',localStorage.getItem('token')?'Success':'Failed');// Configurar API service\napiService.setAuthToken(token);console.log('LOGIN - API service token configured');// Establecer estado\nsetIsAuthenticated(true);setUser({customerId});console.log('LOGIN COMPLETE - isAuthenticated:',true,'user:',{customerId});return{success:true};}else{console.log('LOGIN FAILED - Invalid response:',response.data);return{success:false,message:'Credenciales inv치lidas'};}}catch(error){var _error$response,_error$response$data;console.error('LOGIN ERROR:',error);return{success:false,message:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Error de conexi칩n'};}};const register=async(customerId,password)=>{try{await apiService.register(customerId,password);return{success:true,message:'Usuario registrado exitosamente'};}catch(error){var _error$response2,_error$response2$data;console.error('Error en registro:',error);return{success:false,message:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Error al registrar usuario'};}};const logout=()=>{localStorage.removeItem('token');localStorage.removeItem('customerId');apiService.setAuthToken(null);setIsAuthenticated(false);setUser(null);};const value={isAuthenticated,user,loading,login,register,logout};console.log('AuthContext RENDER - isAuthenticated:',isAuthenticated,'user:',user,'loading:',loading);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","customerId","console","log","user","setUser","loading","setLoading","setAuthToken","login","password","response","data","substring","setItem","success","message","error","_error$response","_error$response$data","register","_error$response2","_error$response2$data","logout","removeItem","value","Provider"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from '../services/apiService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    // Inicializar estado basado en localStorage\n    const token = localStorage.getItem('token');\n    const customerId = localStorage.getItem('customerId');\n    console.log('AuthContext initial state - token:', !!token, 'customerId:', customerId);\n    return !!token;\n  });\n  const [user, setUser] = useState(() => {\n    const customerId = localStorage.getItem('customerId');\n    return customerId ? { customerId } : null;\n  });\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // Solo verificar una vez al montar\n    const token = localStorage.getItem('token');\n    const customerId = localStorage.getItem('customerId');\n    console.log('AuthContext useEffect - Checking stored auth:', { token: !!token, customerId });\n    \n    if (token && customerId) {\n      apiService.setAuthToken(token);\n      setIsAuthenticated(true);\n      setUser({ customerId });\n      console.log('AuthContext useEffect - User authenticated from storage');\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (customerId, password) => {\n    try {\n      console.log('LOGIN START - customerId:', customerId);\n      const response = await apiService.login(customerId, password);\n      console.log('LOGIN RESPONSE:', response.data);\n      \n      if (response.data && response.data.token) {\n        const token = response.data.token;\n        console.log('LOGIN SUCCESS - Token received:', token.substring(0, 20) + '...');\n        \n        // Guardar en localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('customerId', customerId);\n        console.log('LOGIN - Token saved to localStorage:', localStorage.getItem('token') ? 'Success' : 'Failed');\n        \n        // Configurar API service\n        apiService.setAuthToken(token);\n        console.log('LOGIN - API service token configured');\n        \n        // Establecer estado\n        setIsAuthenticated(true);\n        setUser({ customerId });\n        \n        console.log('LOGIN COMPLETE - isAuthenticated:', true, 'user:', { customerId });\n        return { success: true };\n      } else {\n        console.log('LOGIN FAILED - Invalid response:', response.data);\n        return { success: false, message: 'Credenciales inv치lidas' };\n      }\n    } catch (error) {\n      console.error('LOGIN ERROR:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Error de conexi칩n'\n      };\n    }\n  };\n\n  const register = async (customerId, password) => {\n    try {\n      await apiService.register(customerId, password);\n      return { success: true, message: 'Usuario registrado exitosamente' };\n    } catch (error) {\n      console.error('Error en registro:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Error al registrar usuario' \n      };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('customerId');\n    apiService.setAuthToken(null);\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n\n  console.log('AuthContext RENDER - isAuthenticated:', isAuthenticated, 'user:', user, 'loading:', loading);\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}