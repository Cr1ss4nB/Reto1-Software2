{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Laura\\\\Documents\\\\projects2025\\\\Reto4\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from '../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Verificar si hay un token almacenado al cargar la aplicación\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setAuthToken(token);\n      setIsAuthenticated(true);\n      setUser({\n        customerId: localStorage.getItem('customerId')\n      });\n    }\n    setLoading(false);\n  }, []);\n  const login = async (customerId, password) => {\n    try {\n      const response = await apiService.login(customerId, password);\n      if (response.data.userCreated) {\n        const token = response.data.token;\n        localStorage.setItem('token', token);\n        localStorage.setItem('customerId', customerId);\n        apiService.setAuthToken(token);\n        setIsAuthenticated(true);\n        setUser({\n          customerId\n        });\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          message: 'Credenciales inválidas'\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error en login:', error);\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error de conexión'\n      };\n    }\n  };\n  const register = async (customerId, password) => {\n    try {\n      await apiService.register(customerId, password);\n      return {\n        success: true,\n        message: 'Usuario registrado exitosamente'\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error en registro:', error);\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error al registrar usuario'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('customerId');\n    apiService.setAuthToken(null);\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","token","localStorage","getItem","setAuthToken","customerId","login","password","response","data","userCreated","setItem","success","message","error","_error$response","_error$response$data","console","register","_error$response2","_error$response2$data","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport apiService from '../services/apiService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Verificar si hay un token almacenado al cargar la aplicación\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      apiService.setAuthToken(token);\r\n      setIsAuthenticated(true);\r\n      setUser({ customerId: localStorage.getItem('customerId') });\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (customerId, password) => {\r\n    try {\r\n      const response = await apiService.login(customerId, password);\r\n      if (response.data.userCreated) {\r\n        const token = response.data.token;\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('customerId', customerId);\r\n        apiService.setAuthToken(token);\r\n        setIsAuthenticated(true);\r\n        setUser({ customerId });\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, message: 'Credenciales inválidas' };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error en login:', error);\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.message || 'Error de conexión' \r\n      };\r\n    }\r\n  };\r\n\r\n  const register = async (customerId, password) => {\r\n    try {\r\n      await apiService.register(customerId, password);\r\n      return { success: true, message: 'Usuario registrado exitosamente' };\r\n    } catch (error) {\r\n      console.error('Error en registro:', error);\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.message || 'Error al registrar usuario' \r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('customerId');\r\n    apiService.setAuthToken(null);\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}