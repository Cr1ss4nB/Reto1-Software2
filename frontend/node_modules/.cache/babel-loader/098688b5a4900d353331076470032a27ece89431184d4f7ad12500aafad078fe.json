{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para agregar el token a las peticiones\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  console.log('API Request interceptor - Token from localStorage:', token ? 'Present' : 'Missing');\n  console.log('API Request interceptor - URL:', config.url);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('API Request interceptor - Authorization header set');\n  } else {\n    console.log('API Request interceptor - No token found, request will be unauthorized');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para manejar respuestas de error\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.log('Error 401 - Token inválido o expirado');\n    // Limpiar localStorage y redirigir solo si no estamos en login\n    const currentPath = window.location.pathname;\n    if (currentPath !== '/login' && currentPath !== '/') {\n      localStorage.removeItem('token');\n      localStorage.removeItem('customerId');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nconst apiService = {\n  // Configurar token de autenticación\n  setAuthToken: token => {\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      console.log('API Service - Token set in defaults headers:', token.substring(0, 20) + '...');\n    } else {\n      delete api.defaults.headers.common['Authorization'];\n      console.log('API Service - Token removed from defaults headers');\n    }\n  },\n  // Servicios de autenticación\n  login: (customerId, password) => {\n    return api.post('/login/authuser', {\n      customerId,\n      password\n    });\n  },\n  register: (customerId, password) => {\n    return api.post('/login/createuser', {\n      customerId,\n      password\n    });\n  },\n  // Servicios de clientes (cuando estén disponibles)\n  getCustomers: () => {\n    return api.get('/customer/findcustomerbyid');\n  },\n  createCustomer: customerData => {\n    return api.post('/customer/createcustomer', customerData);\n  },\n  // Servicios de pedidos a través del Gateway\n  getOrders: customerId => {\n    return api.get(`/order/findorderbycustomerid?customerid=${customerId}`);\n  },\n  createOrder: orderData => {\n    return api.post('/order/createorder', orderData);\n  },\n  updateOrderStatus: (orderId, status) => {\n    return api.put('/order/updateorderstatus', {\n      orderId,\n      status\n    });\n  },\n  // Verificar estado de servicios\n  checkServiceHealth: async () => {\n    // Simplemente asumir que están funcionando si llegamos al dashboard\n    const services = {\n      gateway: true,\n      // Si el login funciona, el gateway está funcionando\n      login: true,\n      // Si el login funciona, el login service está funcionando\n      user: false,\n      // No implementado aún\n      order: false // No implementado aún\n    };\n    console.log('Servicios verificados - Gateway y Login asumidos como online (login exitoso)');\n    return services;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","Authorization","error","Promise","reject","response","_error$response","status","currentPath","window","location","pathname","removeItem","href","apiService","setAuthToken","defaults","common","substring","login","customerId","password","post","register","getCustomers","get","createCustomer","customerData","getOrders","createOrder","orderData","updateOrderStatus","orderId","put","checkServiceHealth","services","gateway","user","order"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para agregar el token a las peticiones\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    console.log('API Request interceptor - Token from localStorage:', token ? 'Present' : 'Missing');\r\n    console.log('API Request interceptor - URL:', config.url);\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n      console.log('API Request interceptor - Authorization header set');\r\n    } else {\r\n      console.log('API Request interceptor - No token found, request will be unauthorized');\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Interceptor para manejar respuestas de error\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      console.log('Error 401 - Token inválido o expirado');\r\n      // Limpiar localStorage y redirigir solo si no estamos en login\r\n      const currentPath = window.location.pathname;\r\n      if (currentPath !== '/login' && currentPath !== '/') {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('customerId');\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst apiService = {\r\n  // Configurar token de autenticación\r\n  setAuthToken: (token) => {\r\n    if (token) {\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      console.log('API Service - Token set in defaults headers:', token.substring(0, 20) + '...');\r\n    } else {\r\n      delete api.defaults.headers.common['Authorization'];\r\n      console.log('API Service - Token removed from defaults headers');\r\n    }\r\n  },\r\n\r\n  // Servicios de autenticación\r\n  login: (customerId, password) => {\r\n    return api.post('/login/authuser', { customerId, password });\r\n  },\r\n\r\n  register: (customerId, password) => {\r\n    return api.post('/login/createuser', { customerId, password });\r\n  },\r\n\r\n  // Servicios de clientes (cuando estén disponibles)\r\n  getCustomers: () => {\r\n    return api.get('/customer/findcustomerbyid');\r\n  },\r\n\r\n  createCustomer: (customerData) => {\r\n    return api.post('/customer/createcustomer', customerData);\r\n  },\r\n\r\n  // Servicios de pedidos a través del Gateway\r\n  getOrders: (customerId) => {\r\n    return api.get(`/order/findorderbycustomerid?customerid=${customerId}`);\r\n  },\r\n\r\n  createOrder: (orderData) => {\r\n    return api.post('/order/createorder', orderData);\r\n  },\r\n\r\n  updateOrderStatus: (orderId, status) => {\r\n    return api.put('/order/updateorderstatus', { orderId, status });\r\n  },\r\n\r\n  // Verificar estado de servicios\r\n  checkServiceHealth: async () => {\r\n    // Simplemente asumir que están funcionando si llegamos al dashboard\r\n    const services = {\r\n      gateway: true,   // Si el login funciona, el gateway está funcionando\r\n      login: true,     // Si el login funciona, el login service está funcionando\r\n      user: false,     // No implementado aún\r\n      order: false     // No implementado aún\r\n    };\r\n\r\n    console.log('Servicios verificados - Gateway y Login asumidos como online (login exitoso)');\r\n    return services;\r\n  }\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEJ,KAAK,GAAG,SAAS,GAAG,SAAS,CAAC;EAChGG,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEL,MAAM,CAACM,GAAG,CAAC;EACzD,IAAIL,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACW,aAAa,GAAG,UAAUN,KAAK,EAAE;IAChDG,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;EACnE,CAAC,MAAM;IACLD,OAAO,CAACC,GAAG,CAAC,wEAAwE,CAAC;EACvF;EACA,OAAOL,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACI,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCT,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpD;IACA,MAAMS,WAAW,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;IAC5C,IAAIH,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,GAAG,EAAE;MACnDZ,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;MAChChB,YAAY,CAACgB,UAAU,CAAC,YAAY,CAAC;MACrCH,MAAM,CAACC,QAAQ,CAACG,IAAI,GAAG,QAAQ;IACjC;EACF;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,MAAMY,UAAU,GAAG;EACjB;EACAC,YAAY,EAAGpB,KAAK,IAAK;IACvB,IAAIA,KAAK,EAAE;MACTR,GAAG,CAAC6B,QAAQ,CAAC1B,OAAO,CAAC2B,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUtB,KAAK,EAAE;MAChEG,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEJ,KAAK,CAACuB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;IAC7F,CAAC,MAAM;MACL,OAAO/B,GAAG,CAAC6B,QAAQ,CAAC1B,OAAO,CAAC2B,MAAM,CAAC,eAAe,CAAC;MACnDnB,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;IAClE;EACF,CAAC;EAED;EACAoB,KAAK,EAAEA,CAACC,UAAU,EAAEC,QAAQ,KAAK;IAC/B,OAAOlC,GAAG,CAACmC,IAAI,CAAC,iBAAiB,EAAE;MAAEF,UAAU;MAAEC;IAAS,CAAC,CAAC;EAC9D,CAAC;EAEDE,QAAQ,EAAEA,CAACH,UAAU,EAAEC,QAAQ,KAAK;IAClC,OAAOlC,GAAG,CAACmC,IAAI,CAAC,mBAAmB,EAAE;MAAEF,UAAU;MAAEC;IAAS,CAAC,CAAC;EAChE,CAAC;EAED;EACAG,YAAY,EAAEA,CAAA,KAAM;IAClB,OAAOrC,GAAG,CAACsC,GAAG,CAAC,4BAA4B,CAAC;EAC9C,CAAC;EAEDC,cAAc,EAAGC,YAAY,IAAK;IAChC,OAAOxC,GAAG,CAACmC,IAAI,CAAC,0BAA0B,EAAEK,YAAY,CAAC;EAC3D,CAAC;EAED;EACAC,SAAS,EAAGR,UAAU,IAAK;IACzB,OAAOjC,GAAG,CAACsC,GAAG,CAAC,2CAA2CL,UAAU,EAAE,CAAC;EACzE,CAAC;EAEDS,WAAW,EAAGC,SAAS,IAAK;IAC1B,OAAO3C,GAAG,CAACmC,IAAI,CAAC,oBAAoB,EAAEQ,SAAS,CAAC;EAClD,CAAC;EAEDC,iBAAiB,EAAEA,CAACC,OAAO,EAAEzB,MAAM,KAAK;IACtC,OAAOpB,GAAG,CAAC8C,GAAG,CAAC,0BAA0B,EAAE;MAAED,OAAO;MAAEzB;IAAO,CAAC,CAAC;EACjE,CAAC;EAED;EACA2B,kBAAkB,EAAE,MAAAA,CAAA,KAAY;IAC9B;IACA,MAAMC,QAAQ,GAAG;MACfC,OAAO,EAAE,IAAI;MAAI;MACjBjB,KAAK,EAAE,IAAI;MAAM;MACjBkB,IAAI,EAAE,KAAK;MAAM;MACjBC,KAAK,EAAE,KAAK,CAAK;IACnB,CAAC;IAEDxC,OAAO,CAACC,GAAG,CAAC,8EAA8E,CAAC;IAC3F,OAAOoC,QAAQ;EACjB;AACF,CAAC;AAED,eAAerB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}