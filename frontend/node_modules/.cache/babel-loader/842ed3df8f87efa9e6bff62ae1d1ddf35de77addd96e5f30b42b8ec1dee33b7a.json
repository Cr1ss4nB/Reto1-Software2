{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para agregar el token a las peticiones\napi.interceptors.request.use(config => {\n  console.log('Making request:', {\n    url: config.url,\n    method: config.method,\n    baseURL: config.baseURL,\n    fullURL: `${config.baseURL}${config.url}`,\n    headers: config.headers\n  });\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Interceptor para manejar respuestas de error\napi.interceptors.response.use(response => {\n  console.log('Response received:', response);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$config, _error$config2, _error$config3, _error$response4;\n  console.error('API Error:', error);\n  console.error('Error details:', {\n    message: error.message,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n    data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data,\n    config: {\n      url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n      method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n      headers: (_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.headers\n    }\n  });\n  if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 401) {\n    // Token expirado o inválido\n    localStorage.removeItem('token');\n    localStorage.removeItem('customerId');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nconst apiService = {\n  // Configurar token de autenticación\n  setAuthToken: token => {\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete api.defaults.headers.common['Authorization'];\n    }\n  },\n  // Servicios de autenticación\n  login: (customerId, password) => {\n    return api.post('/login/authuser', {\n      customerId,\n      password\n    });\n  },\n  register: (customerId, password) => {\n    return api.post('/login/createuser', {\n      customerId,\n      password\n    });\n  },\n  // Servicios de clientes (cuando estén disponibles)\n  getCustomers: () => {\n    return api.get('/customer/findcustomerbyid');\n  },\n  createCustomer: customerData => {\n    return api.post('/customer/createcustomer', customerData);\n  },\n  // Servicios de pedidos (cuando estén disponibles)\n  getOrders: customerId => {\n    return api.get(`/order/findorderbycustomerid?customerid=${customerId}`);\n  },\n  createOrder: orderData => {\n    return api.post('/order/createorder', orderData);\n  },\n  updateOrderStatus: (orderId, status) => {\n    return api.put('/order/updateorderstatus', {\n      orderId,\n      status\n    });\n  },\n  // Verificar estado de servicios\n  checkServiceHealth: async () => {\n    const services = {\n      gateway: false,\n      login: false,\n      user: false,\n      order: false\n    };\n    try {\n      // Verificar gateway\n      await api.get('/actuator/health');\n      services.gateway = true;\n    } catch (error) {\n      console.log('Gateway no disponible');\n    }\n    try {\n      // Verificar login service\n      await api.get('/login/health');\n      services.login = true;\n    } catch (error) {\n      console.log('Login service no disponible');\n    }\n    return services;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","console","log","url","method","fullURL","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","_error$response2","_error$response3","_error$config","_error$config2","_error$config3","_error$response4","message","status","statusText","data","removeItem","window","location","href","apiService","setAuthToken","defaults","common","login","customerId","password","post","register","getCustomers","get","createCustomer","customerData","getOrders","createOrder","orderData","updateOrderStatus","orderId","put","checkServiceHealth","services","gateway","user","order"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para agregar el token a las peticiones\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('Making request:', {\r\n      url: config.url,\r\n      method: config.method,\r\n      baseURL: config.baseURL,\r\n      fullURL: `${config.baseURL}${config.url}`,\r\n      headers: config.headers\r\n    });\r\n    \r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Interceptor para manejar respuestas de error\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('Response received:', response);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    console.error('Error details:', {\r\n      message: error.message,\r\n      status: error.response?.status,\r\n      statusText: error.response?.statusText,\r\n      data: error.response?.data,\r\n      config: {\r\n        url: error.config?.url,\r\n        method: error.config?.method,\r\n        headers: error.config?.headers\r\n      }\r\n    });\r\n    \r\n    if (error.response?.status === 401) {\r\n      // Token expirado o inválido\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('customerId');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst apiService = {\r\n  // Configurar token de autenticación\r\n  setAuthToken: (token) => {\r\n    if (token) {\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n      delete api.defaults.headers.common['Authorization'];\r\n    }\r\n  },\r\n\r\n  // Servicios de autenticación\r\n  login: (customerId, password) => {\r\n    return api.post('/login/authuser', { customerId, password });\r\n  },\r\n\r\n  register: (customerId, password) => {\r\n    return api.post('/login/createuser', { customerId, password });\r\n  },\r\n\r\n  // Servicios de clientes (cuando estén disponibles)\r\n  getCustomers: () => {\r\n    return api.get('/customer/findcustomerbyid');\r\n  },\r\n\r\n  createCustomer: (customerData) => {\r\n    return api.post('/customer/createcustomer', customerData);\r\n  },\r\n\r\n  // Servicios de pedidos (cuando estén disponibles)\r\n  getOrders: (customerId) => {\r\n    return api.get(`/order/findorderbycustomerid?customerid=${customerId}`);\r\n  },\r\n\r\n  createOrder: (orderData) => {\r\n    return api.post('/order/createorder', orderData);\r\n  },\r\n\r\n  updateOrderStatus: (orderId, status) => {\r\n    return api.put('/order/updateorderstatus', { orderId, status });\r\n  },\r\n\r\n  // Verificar estado de servicios\r\n  checkServiceHealth: async () => {\r\n    const services = {\r\n      gateway: false,\r\n      login: false,\r\n      user: false,\r\n      order: false\r\n    };\r\n\r\n    try {\r\n      // Verificar gateway\r\n      await api.get('/actuator/health');\r\n      services.gateway = true;\r\n    } catch (error) {\r\n      console.log('Gateway no disponible');\r\n    }\r\n\r\n    try {\r\n      // Verificar login service\r\n      await api.get('/login/health');\r\n      services.login = true;\r\n    } catch (error) {\r\n      console.log('Login service no disponible');\r\n    }\r\n\r\n    return services;\r\n  }\r\n};\r\n\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}