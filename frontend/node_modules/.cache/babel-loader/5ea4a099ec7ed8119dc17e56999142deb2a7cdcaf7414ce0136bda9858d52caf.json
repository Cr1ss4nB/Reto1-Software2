{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Laura\\\\Documents\\\\projects2025\\\\Reto4\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from '../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Verificar si hay un token almacenado al cargar la aplicación\n    const token = localStorage.getItem('token');\n    const customerId = localStorage.getItem('customerId');\n    console.log('AuthContext useEffect - Checking stored auth:', {\n      token: !!token,\n      customerId\n    });\n    if (token) {\n      apiService.setAuthToken(token);\n      setIsAuthenticated(true);\n      setUser({\n        customerId\n      });\n      console.log('AuthContext useEffect - User authenticated from storage');\n    } else {\n      // Solo establecer como no autenticado si no hay token Y no estamos en proceso de login\n      if (!loading) {\n        console.log('AuthContext useEffect - No token found, user not authenticated');\n        setIsAuthenticated(false);\n        setUser(null);\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (customerId, password) => {\n    try {\n      const response = await apiService.login(customerId, password);\n      console.log('Login response:', response);\n      console.log('Login response data:', response.data);\n      console.log('Login response status:', response.status);\n      if (response.data && response.data.userCreated) {\n        const token = response.data.token;\n        console.log('Token received:', token);\n        if (token) {\n          localStorage.setItem('token', token);\n          localStorage.setItem('customerId', customerId);\n          apiService.setAuthToken(token);\n          setIsAuthenticated(true);\n          setUser({\n            customerId\n          });\n          console.log('AuthContext login - User authenticated:', {\n            customerId,\n            isAuthenticated: true\n          });\n          return {\n            success: true\n          };\n        } else {\n          console.log('AuthContext login - No token received from server');\n          return {\n            success: false,\n            message: 'Token no recibido del servidor'\n          };\n        }\n      } else {\n        return {\n          success: false,\n          message: 'Credenciales inválidas'\n        };\n      }\n    } catch (error) {\n      console.error('Error en login:', error);\n      let errorMessage = 'Error de conexión';\n      if (error.response) {\n        if (error.response.status === 401) {\n          errorMessage = 'Credenciales inválidas';\n        } else if (error.response.status === 500) {\n          errorMessage = 'Error del servidor. Intente más tarde.';\n        } else if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        }\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const register = async (customerId, password) => {\n    try {\n      await apiService.register(customerId, password);\n      return {\n        success: true,\n        message: 'Usuario registrado exitosamente'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error en registro:', error);\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al registrar usuario'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('customerId');\n    apiService.setAuthToken(null);\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","token","localStorage","getItem","customerId","console","log","setAuthToken","login","password","response","data","status","userCreated","setItem","success","message","error","errorMessage","register","_error$response","_error$response$data","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport apiService from '../services/apiService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Verificar si hay un token almacenado al cargar la aplicación\r\n    const token = localStorage.getItem('token');\r\n    const customerId = localStorage.getItem('customerId');\r\n    console.log('AuthContext useEffect - Checking stored auth:', { token: !!token, customerId });\r\n    \r\n    if (token) {\r\n      apiService.setAuthToken(token);\r\n      setIsAuthenticated(true);\r\n      setUser({ customerId });\r\n      console.log('AuthContext useEffect - User authenticated from storage');\r\n    } else {\r\n      // Solo establecer como no autenticado si no hay token Y no estamos en proceso de login\r\n      if (!loading) {\r\n        console.log('AuthContext useEffect - No token found, user not authenticated');\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (customerId, password) => {\r\n    try {\r\n      const response = await apiService.login(customerId, password);\r\n      console.log('Login response:', response);\r\n      console.log('Login response data:', response.data);\r\n      console.log('Login response status:', response.status);\r\n      \r\n      if (response.data && response.data.userCreated) {\r\n        const token = response.data.token;\r\n        console.log('Token received:', token);\r\n        if (token) {\r\n          localStorage.setItem('token', token);\r\n          localStorage.setItem('customerId', customerId);\r\n          apiService.setAuthToken(token);\r\n          setIsAuthenticated(true);\r\n          setUser({ customerId });\r\n          console.log('AuthContext login - User authenticated:', { customerId, isAuthenticated: true });\r\n          return { success: true };\r\n        } else {\r\n          console.log('AuthContext login - No token received from server');\r\n          return { success: false, message: 'Token no recibido del servidor' };\r\n        }\r\n      } else {\r\n        return { success: false, message: 'Credenciales inválidas' };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error en login:', error);\r\n      let errorMessage = 'Error de conexión';\r\n      \r\n      if (error.response) {\r\n        if (error.response.status === 401) {\r\n          errorMessage = 'Credenciales inválidas';\r\n        } else if (error.response.status === 500) {\r\n          errorMessage = 'Error del servidor. Intente más tarde.';\r\n        } else if (error.response.data && error.response.data.message) {\r\n          errorMessage = error.response.data.message;\r\n        }\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      return { \r\n        success: false, \r\n        message: errorMessage\r\n      };\r\n    }\r\n  };\r\n\r\n  const register = async (customerId, password) => {\r\n    try {\r\n      await apiService.register(customerId, password);\r\n      return { success: true, message: 'Usuario registrado exitosamente' };\r\n    } catch (error) {\r\n      console.error('Error en registro:', error);\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.message || 'Error al registrar usuario' \r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('customerId');\r\n    apiService.setAuthToken(null);\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  const value = {\r\n    isAuthenticated,\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}