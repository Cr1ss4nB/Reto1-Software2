{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Laura\\\\Documents\\\\projects2025\\\\Reto4\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from '../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Verificar autenticación al montar el componente\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const customerId = localStorage.getItem('customerId');\n        console.log('AuthContext useEffect - Checking stored auth:', {\n          token: !!token,\n          customerId,\n          tokenLength: token ? token.length : 0\n        });\n        if (token && customerId) {\n          // Configurar el token en el servicio API\n          apiService.setAuthToken(token);\n\n          // Verificar si el token es válido\n          const isValidToken = await apiService.verifyToken();\n          if (isValidToken) {\n            setIsAuthenticated(true);\n            setUser({\n              customerId\n            });\n            console.log('AuthContext useEffect - Token válido, usuario autenticado');\n          } else {\n            console.log('AuthContext useEffect - Token inválido, limpiando sesión');\n            // Token inválido, limpiar localStorage\n            localStorage.removeItem('token');\n            localStorage.removeItem('customerId');\n            apiService.setAuthToken(null);\n            setIsAuthenticated(false);\n            setUser(null);\n          }\n        } else {\n          console.log('AuthContext useEffect - No hay token almacenado');\n          setIsAuthenticated(false);\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('AuthContext useEffect - Error inicializando auth:', error);\n        setIsAuthenticated(false);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async (customerId, password) => {\n    try {\n      console.log('LOGIN START - customerId:', customerId);\n      const response = await apiService.login(customerId, password);\n      console.log('LOGIN RESPONSE:', response.data);\n      if (response.data && response.data.token) {\n        const token = response.data.token;\n        console.log('LOGIN SUCCESS - Token received:', token.substring(0, 20) + '...');\n\n        // Guardar en localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('customerId', customerId);\n        console.log('LOGIN - Token saved to localStorage:', localStorage.getItem('token') ? 'Success' : 'Failed');\n\n        // Configurar API service\n        apiService.setAuthToken(token);\n        console.log('LOGIN - API service token configured');\n\n        // Establecer estado\n        setIsAuthenticated(true);\n        setUser({\n          customerId\n        });\n        console.log('LOGIN COMPLETE - isAuthenticated:', true, 'user:', {\n          customerId\n        });\n        return {\n          success: true\n        };\n      } else {\n        console.log('LOGIN FAILED - Invalid response:', response.data);\n        return {\n          success: false,\n          message: 'Credenciales inválidas'\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('LOGIN ERROR:', error);\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error de conexión'\n      };\n    }\n  };\n  const register = async (customerId, password) => {\n    try {\n      await apiService.register(customerId, password);\n      return {\n        success: true,\n        message: 'Usuario registrado exitosamente'\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error en registro:', error);\n      return {\n        success: false,\n        message: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Error al registrar usuario'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('customerId');\n    apiService.setAuthToken(null);\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n  console.log('AuthContext RENDER - isAuthenticated:', isAuthenticated, 'user:', user, 'loading:', loading);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","initializeAuth","token","localStorage","getItem","customerId","console","log","tokenLength","length","setAuthToken","isValidToken","verifyToken","removeItem","error","login","password","response","data","substring","setItem","success","message","_error$response","_error$response$data","register","_error$response2","_error$response2$data","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from '../services/apiService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Verificar autenticación al montar el componente\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const customerId = localStorage.getItem('customerId');\n        \n        console.log('AuthContext useEffect - Checking stored auth:', { \n          token: !!token, \n          customerId,\n          tokenLength: token ? token.length : 0\n        });\n        \n        if (token && customerId) {\n          // Configurar el token en el servicio API\n          apiService.setAuthToken(token);\n          \n          // Verificar si el token es válido\n          const isValidToken = await apiService.verifyToken();\n          \n          if (isValidToken) {\n            setIsAuthenticated(true);\n            setUser({ customerId });\n            console.log('AuthContext useEffect - Token válido, usuario autenticado');\n          } else {\n            console.log('AuthContext useEffect - Token inválido, limpiando sesión');\n            // Token inválido, limpiar localStorage\n            localStorage.removeItem('token');\n            localStorage.removeItem('customerId');\n            apiService.setAuthToken(null);\n            setIsAuthenticated(false);\n            setUser(null);\n          }\n        } else {\n          console.log('AuthContext useEffect - No hay token almacenado');\n          setIsAuthenticated(false);\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('AuthContext useEffect - Error inicializando auth:', error);\n        setIsAuthenticated(false);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (customerId, password) => {\n    try {\n      console.log('LOGIN START - customerId:', customerId);\n      const response = await apiService.login(customerId, password);\n      console.log('LOGIN RESPONSE:', response.data);\n      \n      if (response.data && response.data.token) {\n        const token = response.data.token;\n        console.log('LOGIN SUCCESS - Token received:', token.substring(0, 20) + '...');\n        \n        // Guardar en localStorage\n        localStorage.setItem('token', token);\n        localStorage.setItem('customerId', customerId);\n        console.log('LOGIN - Token saved to localStorage:', localStorage.getItem('token') ? 'Success' : 'Failed');\n        \n        // Configurar API service\n        apiService.setAuthToken(token);\n        console.log('LOGIN - API service token configured');\n        \n        // Establecer estado\n        setIsAuthenticated(true);\n        setUser({ customerId });\n        \n        console.log('LOGIN COMPLETE - isAuthenticated:', true, 'user:', { customerId });\n        return { success: true };\n      } else {\n        console.log('LOGIN FAILED - Invalid response:', response.data);\n        return { success: false, message: 'Credenciales inválidas' };\n      }\n    } catch (error) {\n      console.error('LOGIN ERROR:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Error de conexión'\n      };\n    }\n  };\n\n  const register = async (customerId, password) => {\n    try {\n      await apiService.register(customerId, password);\n      return { success: true, message: 'Usuario registrado exitosamente' };\n    } catch (error) {\n      console.error('Error en registro:', error);\n      return { \n        success: false, \n        message: error.response?.data?.message || 'Error al registrar usuario' \n      };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('customerId');\n    apiService.setAuthToken(null);\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n\n  console.log('AuthContext RENDER - isAuthenticated:', isAuthenticated, 'user:', user, 'loading:', loading);\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}