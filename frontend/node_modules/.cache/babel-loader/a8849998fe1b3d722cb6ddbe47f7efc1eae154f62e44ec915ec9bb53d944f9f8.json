{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para agregar el token a las peticiones\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para manejar respuestas de error\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expirado o inválido\n    localStorage.removeItem('token');\n    localStorage.removeItem('customerId');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nconst apiService = {\n  // Configurar token de autenticación\n  setAuthToken: token => {\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete api.defaults.headers.common['Authorization'];\n    }\n  },\n  // Servicios de autenticación\n  login: (customerId, password) => {\n    return api.post('/login/authuser', {\n      customerId,\n      password\n    });\n  },\n  register: (customerId, password) => {\n    return api.post('/login/createuser', {\n      customerId,\n      password\n    });\n  },\n  // Servicios de clientes (cuando estén disponibles)\n  getCustomers: () => {\n    return api.get('/customer/findcustomerbyid');\n  },\n  createCustomer: customerData => {\n    return api.post('/customer/createcustomer', customerData);\n  },\n  // Servicios de pedidos (cuando estén disponibles)\n  getOrders: customerId => {\n    return api.get(`/order/findorderbycustomerid?customerid=${customerId}`);\n  },\n  createOrder: orderData => {\n    return api.post('/order/createorder', orderData);\n  },\n  updateOrderStatus: (orderId, status) => {\n    return api.put('/order/updateorderstatus', {\n      orderId,\n      status\n    });\n  },\n  // Verificar estado de servicios\n  checkServiceHealth: async () => {\n    const services = {\n      gateway: false,\n      login: false,\n      user: false,\n      order: false\n    };\n    try {\n      // Verificar gateway\n      await api.get('/actuator/health');\n      services.gateway = true;\n    } catch (error) {\n      console.log('Gateway no disponible');\n    }\n    try {\n      // Verificar login service\n      await api.get('/login/health');\n      services.login = true;\n    } catch (error) {\n      console.log('Login service no disponible');\n    }\n    return services;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","apiService","setAuthToken","defaults","common","login","customerId","password","post","register","getCustomers","get","createCustomer","customerData","getOrders","createOrder","orderData","updateOrderStatus","orderId","put","checkServiceHealth","services","gateway","user","order","console","log"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor para agregar el token a las peticiones\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para manejar respuestas de error\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expirado o inválido\n      localStorage.removeItem('token');\n      localStorage.removeItem('customerId');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst apiService = {\n  // Configurar token de autenticación\n  setAuthToken: (token) => {\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete api.defaults.headers.common['Authorization'];\n    }\n  },\n\n  // Servicios de autenticación\n  login: (customerId, password) => {\n    return api.post('/login/authuser', { customerId, password });\n  },\n\n  register: (customerId, password) => {\n    return api.post('/login/createuser', { customerId, password });\n  },\n\n  // Servicios de clientes (cuando estén disponibles)\n  getCustomers: () => {\n    return api.get('/customer/findcustomerbyid');\n  },\n\n  createCustomer: (customerData) => {\n    return api.post('/customer/createcustomer', customerData);\n  },\n\n  // Servicios de pedidos (cuando estén disponibles)\n  getOrders: (customerId) => {\n    return api.get(`/order/findorderbycustomerid?customerid=${customerId}`);\n  },\n\n  createOrder: (orderData) => {\n    return api.post('/order/createorder', orderData);\n  },\n\n  updateOrderStatus: (orderId, status) => {\n    return api.put('/order/updateorderstatus', { orderId, status });\n  },\n\n  // Verificar estado de servicios\n  checkServiceHealth: async () => {\n    const services = {\n      gateway: false,\n      login: false,\n      user: false,\n      order: false\n    };\n\n    try {\n      // Verificar gateway\n      await api.get('/actuator/health');\n      services.gateway = true;\n    } catch (error) {\n      console.log('Gateway no disponible');\n    }\n\n    try {\n      // Verificar login service\n      await api.get('/login/health');\n      services.login = true;\n    } catch (error) {\n      console.log('Login service no disponible');\n    }\n\n    return services;\n  }\n};\n\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}