{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para agregar el token a las peticiones\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  console.log('API Request interceptor - Token from localStorage:', token ? 'Present' : 'Missing');\n  console.log('API Request interceptor - URL:', config.url);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('API Request interceptor - Authorization header set');\n  } else {\n    console.log('API Request interceptor - No token found, request will be unauthorized');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para manejar respuestas de error\napi.interceptors.response.use(response => response, error => {\n  var _error$response, _error$response2;\n  const currentPath = window.location.pathname;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.log('Error 401 - Token inválido o expirado');\n    // Solo limpiar localStorage y redirigir si no estamos ya en login o unauthorized\n    if (currentPath !== '/login' && currentPath !== '/' && currentPath !== '/unauthorized') {\n      console.log('Error 401 - Limpiando sesión y redirigiendo a unauthorized');\n      localStorage.removeItem('token');\n      localStorage.removeItem('customerId');\n      // Redirigir a página de unauthorized en lugar de login\n      window.location.replace('/unauthorized');\n    }\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n    console.log('Error 403 - Acceso prohibido');\n    // Redirigir a página de forbidden si no estamos ya ahí\n    if (currentPath !== '/forbidden') {\n      console.log('Error 403 - Redirigiendo a forbidden');\n      window.location.replace('/forbidden');\n    }\n  }\n  return Promise.reject(error);\n});\nconst apiService = {\n  // Configurar token de autenticación\n  setAuthToken: token => {\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      console.log('API Service - Token set in defaults headers:', token.substring(0, 20) + '...');\n    } else {\n      delete api.defaults.headers.common['Authorization'];\n      console.log('API Service - Token removed from defaults headers');\n    }\n  },\n  // Servicios de autenticación\n  login: (customerId, password) => {\n    return api.post('/login/authuser', {\n      customerId,\n      password\n    });\n  },\n  register: (customerId, password) => {\n    return api.post('/login/createuser', {\n      customerId,\n      password\n    });\n  },\n  // Servicios de clientes (cuando estén disponibles)\n  getCustomers: () => {\n    return api.get('/customer/findcustomerbyid');\n  },\n  createCustomer: customerData => {\n    return api.post('/customer/createcustomer', customerData);\n  },\n  // Servicios de pedidos - temporalmente directo al microservicio\n  getOrders: customerId => {\n    return api.get(`http://localhost:8082/order/findorderbycustomerid?customerid=${customerId}`);\n  },\n  createOrder: orderData => {\n    return api.post('http://localhost:8082/order/createorder', orderData);\n  },\n  updateOrderStatus: (orderId, status) => {\n    return api.put('http://localhost:8082/order/updateorderstatus', {\n      orderId,\n      status\n    });\n  },\n  // Verificar si el token es válido\n  verifyToken: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.log('No token found in localStorage');\n        return false;\n      }\n\n      // Verificar que el token tiene el formato correcto (JWT tiene 3 partes separadas por puntos)\n      const tokenParts = token.split('.');\n      if (tokenParts.length !== 3) {\n        console.log('Invalid token format');\n        return false;\n      }\n\n      // Verificar expiración del token (decodificar el payload)\n      try {\n        const payload = JSON.parse(atob(tokenParts[1]));\n        const currentTime = Math.floor(Date.now() / 1000);\n        if (payload.exp && payload.exp < currentTime) {\n          console.log('Token has expired');\n          return false;\n        }\n        console.log('Token format and expiration are valid');\n        return true;\n      } catch (decodeError) {\n        console.log('Error decoding token payload:', decodeError);\n        return false;\n      }\n    } catch (error) {\n      console.log('Token verification failed:', error);\n      return false;\n    }\n  },\n  // Verificar estado de servicios\n  checkServiceHealth: async () => {\n    // Simplemente asumir que están funcionando si llegamos al dashboard\n    const services = {\n      gateway: true,\n      // Si el login funciona, el gateway está funcionando\n      login: true,\n      // Si el login funciona, el login service está funcionando\n      user: false,\n      // No implementado aún\n      order: false // No implementado aún\n    };\n    console.log('Servicios verificados - Gateway y Login asumidos como online (login exitoso)');\n    return services;\n  }\n};\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","Authorization","error","Promise","reject","response","_error$response","_error$response2","currentPath","window","location","pathname","status","removeItem","replace","apiService","setAuthToken","defaults","common","substring","login","customerId","password","post","register","getCustomers","get","createCustomer","customerData","getOrders","createOrder","orderData","updateOrderStatus","orderId","put","verifyToken","tokenParts","split","length","payload","JSON","parse","atob","currentTime","Math","floor","Date","now","exp","decodeError","checkServiceHealth","services","gateway","user","order"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor para agregar el token a las peticiones\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    console.log('API Request interceptor - Token from localStorage:', token ? 'Present' : 'Missing');\n    console.log('API Request interceptor - URL:', config.url);\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('API Request interceptor - Authorization header set');\n    } else {\n      console.log('API Request interceptor - No token found, request will be unauthorized');\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para manejar respuestas de error\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const currentPath = window.location.pathname;\n    \n    if (error.response?.status === 401) {\n      console.log('Error 401 - Token inválido o expirado');\n      // Solo limpiar localStorage y redirigir si no estamos ya en login o unauthorized\n      if (currentPath !== '/login' && currentPath !== '/' && currentPath !== '/unauthorized') {\n        console.log('Error 401 - Limpiando sesión y redirigiendo a unauthorized');\n        localStorage.removeItem('token');\n        localStorage.removeItem('customerId');\n        // Redirigir a página de unauthorized en lugar de login\n        window.location.replace('/unauthorized');\n      }\n    } else if (error.response?.status === 403) {\n      console.log('Error 403 - Acceso prohibido');\n      // Redirigir a página de forbidden si no estamos ya ahí\n      if (currentPath !== '/forbidden') {\n        console.log('Error 403 - Redirigiendo a forbidden');\n        window.location.replace('/forbidden');\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst apiService = {\n  // Configurar token de autenticación\n  setAuthToken: (token) => {\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      console.log('API Service - Token set in defaults headers:', token.substring(0, 20) + '...');\n    } else {\n      delete api.defaults.headers.common['Authorization'];\n      console.log('API Service - Token removed from defaults headers');\n    }\n  },\n\n  // Servicios de autenticación\n  login: (customerId, password) => {\n    return api.post('/login/authuser', { customerId, password });\n  },\n\n  register: (customerId, password) => {\n    return api.post('/login/createuser', { customerId, password });\n  },\n\n  // Servicios de clientes (cuando estén disponibles)\n  getCustomers: () => {\n    return api.get('/customer/findcustomerbyid');\n  },\n\n  createCustomer: (customerData) => {\n    return api.post('/customer/createcustomer', customerData);\n  },\n\n  // Servicios de pedidos - temporalmente directo al microservicio\n  getOrders: (customerId) => {\n    return api.get(`http://localhost:8082/order/findorderbycustomerid?customerid=${customerId}`);\n  },\n\n  createOrder: (orderData) => {\n    return api.post('http://localhost:8082/order/createorder', orderData);\n  },\n\n  updateOrderStatus: (orderId, status) => {\n    return api.put('http://localhost:8082/order/updateorderstatus', { orderId, status });\n  },\n\n  // Verificar si el token es válido\n  verifyToken: async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.log('No token found in localStorage');\n        return false;\n      }\n      \n      // Verificar que el token tiene el formato correcto (JWT tiene 3 partes separadas por puntos)\n      const tokenParts = token.split('.');\n      if (tokenParts.length !== 3) {\n        console.log('Invalid token format');\n        return false;\n      }\n      \n      // Verificar expiración del token (decodificar el payload)\n      try {\n        const payload = JSON.parse(atob(tokenParts[1]));\n        const currentTime = Math.floor(Date.now() / 1000);\n        \n        if (payload.exp && payload.exp < currentTime) {\n          console.log('Token has expired');\n          return false;\n        }\n        \n        console.log('Token format and expiration are valid');\n        return true;\n      } catch (decodeError) {\n        console.log('Error decoding token payload:', decodeError);\n        return false;\n      }\n    } catch (error) {\n      console.log('Token verification failed:', error);\n      return false;\n    }\n  },\n\n  // Verificar estado de servicios\n  checkServiceHealth: async () => {\n    // Simplemente asumir que están funcionando si llegamos al dashboard\n    const services = {\n      gateway: true,   // Si el login funciona, el gateway está funcionando\n      login: true,     // Si el login funciona, el login service está funcionando\n      user: false,     // No implementado aún\n      order: false     // No implementado aún\n    };\n\n    console.log('Servicios verificados - Gateway y Login asumidos como online (login exitoso)');\n    return services;\n  }\n};\n\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}