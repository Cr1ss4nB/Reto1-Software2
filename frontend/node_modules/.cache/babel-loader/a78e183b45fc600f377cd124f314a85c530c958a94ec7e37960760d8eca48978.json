{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8080';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Interceptor para agregar el token a las peticiones\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');console.log('API Request interceptor - Token from localStorage:',token?'Present':'Missing');console.log('API Request interceptor - URL:',config.url);if(token){config.headers.Authorization=\"Bearer \".concat(token);console.log('API Request interceptor - Authorization header set');}else{console.log('API Request interceptor - No token found, request will be unauthorized');}return config;},error=>{return Promise.reject(error);});// Interceptor para manejar respuestas de error\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){console.log('Error 401 - Token inválido o expirado');// Limpiar localStorage y redirigir solo si no estamos en login\nconst currentPath=window.location.pathname;if(currentPath!=='/login'&&currentPath!=='/'){localStorage.removeItem('token');localStorage.removeItem('customerId');window.location.href='/login';}}return Promise.reject(error);});const apiService={// Configurar token de autenticación\nsetAuthToken:token=>{if(token){api.defaults.headers.common['Authorization']=\"Bearer \".concat(token);console.log('API Service - Token set in defaults headers:',token.substring(0,20)+'...');}else{delete api.defaults.headers.common['Authorization'];console.log('API Service - Token removed from defaults headers');}},// Servicios de autenticación\nlogin:(customerId,password)=>{return api.post('/login/authuser',{customerId,password});},register:(customerId,password)=>{return api.post('/login/createuser',{customerId,password});},// Servicios de clientes (cuando estén disponibles)\ngetCustomers:()=>{return api.get('/customer/findcustomerbyid');},createCustomer:customerData=>{return api.post('/customer/createcustomer',customerData);},// Servicios de pedidos a través del Gateway\ngetOrders:customerId=>{return api.get(\"/order/findorderbycustomerid?customerid=\".concat(customerId));},createOrder:orderData=>{return api.post('/order/createorder',orderData);},updateOrderStatus:(orderId,status)=>{return api.put('/order/updateorderstatus',{orderId,status});},// Verificar estado de servicios\ncheckServiceHealth:async()=>{// Simplemente asumir que están funcionando si llegamos al dashboard\nconst services={gateway:true,// Si el login funciona, el gateway está funcionando\nlogin:true,// Si el login funciona, el login service está funcionando\nuser:false,// No implementado aún\norder:false// No implementado aún\n};console.log('Servicios verificados - Gateway y Login asumidos como online (login exitoso)');return services;}};export default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","console","log","url","Authorization","concat","error","Promise","reject","response","_error$response","status","currentPath","window","location","pathname","removeItem","href","apiService","setAuthToken","defaults","common","substring","login","customerId","password","post","register","getCustomers","get","createCustomer","customerData","getOrders","createOrder","orderData","updateOrderStatus","orderId","put","checkServiceHealth","services","gateway","user","order"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/services/apiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor para agregar el token a las peticiones\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    console.log('API Request interceptor - Token from localStorage:', token ? 'Present' : 'Missing');\n    console.log('API Request interceptor - URL:', config.url);\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('API Request interceptor - Authorization header set');\n    } else {\n      console.log('API Request interceptor - No token found, request will be unauthorized');\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para manejar respuestas de error\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      console.log('Error 401 - Token inválido o expirado');\n      // Limpiar localStorage y redirigir solo si no estamos en login\n      const currentPath = window.location.pathname;\n      if (currentPath !== '/login' && currentPath !== '/') {\n        localStorage.removeItem('token');\n        localStorage.removeItem('customerId');\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst apiService = {\n  // Configurar token de autenticación\n  setAuthToken: (token) => {\n    if (token) {\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      console.log('API Service - Token set in defaults headers:', token.substring(0, 20) + '...');\n    } else {\n      delete api.defaults.headers.common['Authorization'];\n      console.log('API Service - Token removed from defaults headers');\n    }\n  },\n\n  // Servicios de autenticación\n  login: (customerId, password) => {\n    return api.post('/login/authuser', { customerId, password });\n  },\n\n  register: (customerId, password) => {\n    return api.post('/login/createuser', { customerId, password });\n  },\n\n  // Servicios de clientes (cuando estén disponibles)\n  getCustomers: () => {\n    return api.get('/customer/findcustomerbyid');\n  },\n\n  createCustomer: (customerData) => {\n    return api.post('/customer/createcustomer', customerData);\n  },\n\n  // Servicios de pedidos a través del Gateway\n  getOrders: (customerId) => {\n    return api.get(`/order/findorderbycustomerid?customerid=${customerId}`);\n  },\n\n  createOrder: (orderData) => {\n    return api.post('/order/createorder', orderData);\n  },\n\n  updateOrderStatus: (orderId, status) => {\n    return api.put('/order/updateorderstatus', { orderId, status });\n  },\n\n  // Verificar estado de servicios\n  checkServiceHealth: async () => {\n    // Simplemente asumir que están funcionando si llegamos al dashboard\n    const services = {\n      gateway: true,   // Si el login funciona, el gateway está funcionando\n      login: true,     // Si el login funciona, el login service está funcionando\n      user: false,     // No implementado aún\n      order: false     // No implementado aún\n    };\n\n    console.log('Servicios verificados - Gateway y Login asumidos como online (login exitoso)');\n    return services;\n  }\n};\n\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}