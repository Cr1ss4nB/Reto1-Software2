{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Laura\\\\Documents\\\\projects2025\\\\Reto4\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from '../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    // Inicializar estado basado en localStorage\n    const token = localStorage.getItem('token');\n    const customerId = localStorage.getItem('customerId');\n    console.log('AuthContext initial state - token:', !!token, 'customerId:', customerId);\n    return !!token;\n  });\n  const [user, setUser] = useState(() => {\n    const customerId = localStorage.getItem('customerId');\n    return customerId ? {\n      customerId\n    } : null;\n  });\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // Solo verificar una vez al montar\n    const token = localStorage.getItem('token');\n    const customerId = localStorage.getItem('customerId');\n    console.log('AuthContext useEffect - Checking stored auth:', {\n      token: !!token,\n      customerId\n    });\n    if (token && customerId) {\n      apiService.setAuthToken(token);\n      setIsAuthenticated(true);\n      setUser({\n        customerId\n      });\n      console.log('AuthContext useEffect - User authenticated from storage');\n    }\n    setLoading(false);\n  }, []);\n  const login = useCallback(async (customerId, password) => {\n    try {\n      const response = await apiService.login(customerId, password);\n      console.log('Login response:', response);\n      console.log('Login response data:', response.data);\n      console.log('Login response status:', response.status);\n      if (response.data && response.data.userCreated) {\n        const token = response.data.token;\n        console.log('Token received:', token);\n        if (token) {\n          localStorage.setItem('token', token);\n          localStorage.setItem('customerId', customerId);\n          apiService.setAuthToken(token);\n          setIsAuthenticated(true);\n          setUser({\n            customerId\n          });\n          console.log('AuthContext login - User authenticated:', {\n            customerId,\n            isAuthenticated: true\n          });\n          return {\n            success: true\n          };\n        } else {\n          console.log('AuthContext login - No token received from server');\n          return {\n            success: false,\n            message: 'Token no recibido del servidor'\n          };\n        }\n      } else {\n        return {\n          success: false,\n          message: 'Credenciales inválidas'\n        };\n      }\n    } catch (error) {\n      console.error('Error en login:', error);\n      let errorMessage = 'Error de conexión';\n      if (error.response) {\n        if (error.response.status === 401) {\n          errorMessage = 'Credenciales inválidas';\n        } else if (error.response.status === 500) {\n          errorMessage = 'Error del servidor. Intente más tarde.';\n        } else if (error.response.data && error.response.data.message) {\n          errorMessage = error.response.data.message;\n        }\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  }, []);\n  const register = async (customerId, password) => {\n    try {\n      await apiService.register(customerId, password);\n      return {\n        success: true,\n        message: 'Usuario registrado exitosamente'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error en registro:', error);\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error al registrar usuario'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('customerId');\n    apiService.setAuthToken(null);\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  const value = useMemo(() => ({\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    register,\n    logout\n  }), [isAuthenticated, user, loading, login, register, logout]);\n\n  // Log state changes\n  console.log('AuthContext render - isAuthenticated:', isAuthenticated, 'user:', user, 'loading:', loading);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"RN1Dq+Sdz9mlLwcKXFRg+voYBGk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","customerId","console","log","user","setUser","loading","setLoading","setAuthToken","login","useCallback","password","response","data","status","userCreated","setItem","success","message","error","errorMessage","register","_error$response","_error$response$data","logout","removeItem","value","useMemo","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Laura/Documents/projects2025/Reto4/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport apiService from '../services/apiService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\r\n    // Inicializar estado basado en localStorage\r\n    const token = localStorage.getItem('token');\r\n    const customerId = localStorage.getItem('customerId');\r\n    console.log('AuthContext initial state - token:', !!token, 'customerId:', customerId);\r\n    return !!token;\r\n  });\r\n  const [user, setUser] = useState(() => {\r\n    const customerId = localStorage.getItem('customerId');\r\n    return customerId ? { customerId } : null;\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Solo verificar una vez al montar\r\n    const token = localStorage.getItem('token');\r\n    const customerId = localStorage.getItem('customerId');\r\n    console.log('AuthContext useEffect - Checking stored auth:', { token: !!token, customerId });\r\n    \r\n    if (token && customerId) {\r\n      apiService.setAuthToken(token);\r\n      setIsAuthenticated(true);\r\n      setUser({ customerId });\r\n      console.log('AuthContext useEffect - User authenticated from storage');\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = useCallback(async (customerId, password) => {\r\n    try {\r\n      const response = await apiService.login(customerId, password);\r\n      console.log('Login response:', response);\r\n      console.log('Login response data:', response.data);\r\n      console.log('Login response status:', response.status);\r\n      \r\n      if (response.data && response.data.userCreated) {\r\n        const token = response.data.token;\r\n        console.log('Token received:', token);\r\n        if (token) {\r\n          localStorage.setItem('token', token);\r\n          localStorage.setItem('customerId', customerId);\r\n          apiService.setAuthToken(token);\r\n          setIsAuthenticated(true);\r\n          setUser({ customerId });\r\n          console.log('AuthContext login - User authenticated:', { customerId, isAuthenticated: true });\r\n          return { success: true };\r\n        } else {\r\n          console.log('AuthContext login - No token received from server');\r\n          return { success: false, message: 'Token no recibido del servidor' };\r\n        }\r\n      } else {\r\n        return { success: false, message: 'Credenciales inválidas' };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error en login:', error);\r\n      let errorMessage = 'Error de conexión';\r\n      \r\n      if (error.response) {\r\n        if (error.response.status === 401) {\r\n          errorMessage = 'Credenciales inválidas';\r\n        } else if (error.response.status === 500) {\r\n          errorMessage = 'Error del servidor. Intente más tarde.';\r\n        } else if (error.response.data && error.response.data.message) {\r\n          errorMessage = error.response.data.message;\r\n        }\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      return { \r\n        success: false, \r\n        message: errorMessage\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const register = async (customerId, password) => {\r\n    try {\r\n      await apiService.register(customerId, password);\r\n      return { success: true, message: 'Usuario registrado exitosamente' };\r\n    } catch (error) {\r\n      console.error('Error en registro:', error);\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.message || 'Error al registrar usuario' \r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('customerId');\r\n    apiService.setAuthToken(null);\r\n    setIsAuthenticated(false);\r\n    setUser(null);\r\n  };\r\n\r\n  const value = useMemo(() => ({\r\n    isAuthenticated,\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout\r\n  }), [isAuthenticated, user, loading, login, register, logout]);\r\n\r\n  // Log state changes\r\n  console.log('AuthContext render - isAuthenticated:', isAuthenticated, 'user:', user, 'loading:', loading);\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}